/*
 * Plugin Name: Azure Voice Search (No FFmpeg)
 * Description: Tìm kiếm bằng giọng nói (Tiếng Việt / Trung) sử dụng Azure Cognitive Services Speech API. Chuyển đổi âm thanh được thực hiện tại trình duyệt.
 * Version: 6.1
 * Author: Strong Anchor Tech (Updated by Gemini)
 * Author URI: https://stronganchortech.com
 */

// ===================================================================================
// PHẦN 1: CÀI ĐẶT PLUGIN VÀ CẤU HÌNH AZURE
// ===================================================================================

add_action('admin_menu', function() {
    add_submenu_page('tools.php', 'Azure Speech Settings', 'Azure Speech', 'manage_options', 'azure-speech-settings', function() {
        ?>
        <div class="wrap">
            <h2>Azure Cognitive Services Speech - Cài đặt</h2>
            <form method="post" action="options.php">
                <?php
                    settings_fields('azure_speech_settings_group');
                    do_settings_sections('azure_speech_settings_group');
                ?>
                <table class="form-table">
                    <tr valign="top">
                        <th scope="row">Azure Speech Key</th>
                        <td><input type="text" name="azure_speech_key" value="<?php echo esc_attr(get_option('azure_speech_key')); ?>" size="60" /></td>
                    </tr>
                    <tr valign="top">
                        <th scope="row">Azure Speech Region</th>
                        <td><input type="text" name="azure_speech_region" value="<?php echo esc_attr(get_option('azure_speech_region')); ?>" size="20" placeholder="eastus, southeastasia" /></td>
                    </tr>
                </table>
                <?php submit_button(); ?>
            </form>
        </div>
        <?php
    });
});

add_action('admin_init', function() {
    register_setting('azure_speech_settings_group', 'azure_speech_key');
    register_setting('azure_speech_settings_group', 'azure_speech_region');
});

// ===================================================================================
// PHẦN 2: GỌI API AZURE (có tham số ngôn ngữ)
// ===================================================================================

function azure_transcribe_audio($audio_path, $language = 'vi-VN') {
    $speech_key = get_option('azure_speech_key');
    $speech_region = get_option('azure_speech_region');

    if (!$speech_key || !$speech_region) {
        return '⚠️ Vui lòng cung cấp Azure Speech Key và Region.';
    }

    $url = "https://{$speech_region}.stt.speech.microsoft.com/speech/recognition/interactive/cognitiveservices/v1?language={$language}";
    
    $headers = [
        'Ocp-Apim-Subscription-Key: ' . $speech_key,
        'Content-Type: audio/wav; codecs=audio/pcm; samplerate=16000'
    ];

    $audio_data = file_get_contents($audio_path);
    if ($audio_data === false) {
        return '❌ Không thể đọc file âm thanh.';
    }

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $audio_data);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code != 200 || !$response) {
        return "❌ Lỗi từ Azure (HTTP {$http_code}): " . ($response ?: 'Không có phản hồi.');
    }

    $result = json_decode($response, true);
    if (isset($result['RecognitionStatus']) && $result['RecognitionStatus'] === 'Success') {
        return $result['DisplayText'];
    } else {
        return '❌ Không thể nhận dạng giọng nói.';
    }
}

// ===================================================================================
// PHẦN 3: SHORTCODE HIỂN THỊ NÚT MICRO + POPUP (Client-side Conversion)
// ===================================================================================

add_shortcode('voice_search_button', function() {
    ob_start();
    ?>
    <style>
        #voice-search-btn { background: none; border: none; cursor: pointer; padding: 5px; }
        #voice-search-btn img { width: 28px; height: 28px; }

        #voice-popup {
            display: none; position: fixed; 
            top: 50% !important; left: 50% !important;
            transform: translate(-50%, -50%) !important;
            background: #f0f0f0 !important; padding: 20px; border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.25);
            text-align: center; z-index: 9999; width: 340px;
        }
        #voice-popup.active { display: block; }
        #voice-popup h3 { margin-top: 0; font-size: 18px; }

        .lang-container { display: flex; justify-content: center; gap: 14px; margin-bottom: 12px; }
        .lang-btn { border: none; background: none; cursor: pointer; text-align: center; }
        .lang-btn img { width: 48px; height: 32px; border: 2px solid transparent; border-radius: 6px; transition: 0.2s; }
        .lang-btn.active img { border-color: #0073aa; box-shadow: 0 0 6px rgba(0,115,170,0.6); }
        .lang-label { font-size: 12px; margin-top: 4px; color: #333; }

        /* CSS CHO GHI CHÚ MỚI THÊM */
        .lang-note {
            font-size: 10px;
            color: #555;
            margin-top: 2px;
            font-style: italic;
            line-height: 1.2;
            min-height: 12px; /* Giữ chiều cao tối thiểu */
        }

        #record-btn { margin-top: 12px; padding: 10px; border: none; border-radius: 50%; background: #0073aa; cursor: pointer; }
        #record-btn img { width: 28px; height: 28px;}

        /* Hiệu ứng micro nhấp nháy đỏ khi đang ghi âm */
        #record-btn.recording img {
            filter: invert(29%) sepia(93%) saturate(7486%) hue-rotate(356deg) brightness(97%) contrast(116%);
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.2); opacity: 0.6; }
            100% { transform: scale(1); opacity: 1; }
        }

        #close-popup { margin-top: 10px; background: none; border: none; color: #888; cursor: pointer; }

        #result-box { margin-top: 15px; font-size: 15px; color: #222; min-height: 24px; }
        .result-item { padding: 6px 10px; border: 1px solid #ccc; border-radius: 6px; cursor: pointer; margin-top: 6px; background: #f9f9f9; }
        .result-item:hover { background: #eee; }
    </style>

    <button id="voice-search-btn" title="Tìm kiếm bằng giọng nói">
        <img src="https://img.icons8.com/?size=60&id=ZNyAxEX9vDxS&format=png&color=FFFFFF" alt="Voice Search">
    </button>

    <div id="voice-popup">
        <h3>Chọn ngôn ngữ</h3>
        <div class="lang-container">
            
            <button class="lang-btn active" data-lang="vi-VN">
                <img src="https://flagcdn.com/vn.svg" alt="Tiếng Việt">
                <div class="lang-label">Tìm bài viết</div>
                <div class="lang-note">Ví dụ:Từ vựng HSK 4, ngữ pháp HSK 4, bài tập HSK 4, bài giảng HSK4...</div>
            </button>
            
            <button class="lang-btn" data-lang="zh-CN">
                <img src="https://flagcdn.com/cn.svg" alt="中文">
                <div class="lang-label">Tra từ</div>
                <div class="lang-note">&nbsp;</div>
            </button>
            
            </div>
        <button id="record-btn" title="Ghi âm">
            <img src="https://img.icons8.com/ios-glyphs/60/ffffff/microphone.png" alt="Record">
        </button>
        <div id="result-box"></div>
        <button id="close-popup">Đóng</button>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const popup = document.getElementById('voice-popup');
        const voiceBtn = document.getElementById('voice-search-btn');
        const recordBtn = document.getElementById('record-btn');
        const langBtns = document.querySelectorAll('.lang-btn');
        const closeBtn = document.getElementById('close-popup');
        const resultBox = document.getElementById('result-box');
        const voicePopup = document.getElementById('voice-popup');

        if (voicePopup) {
            document.body.appendChild(voicePopup);
        }

        let selectedLang = "vi-VN";
        let recorder, stream, chunks = [], recording = false;
        const MAX_RECORD_TIME = 3000; // Ghi âm tối đa 8 giây

        voiceBtn.onclick = () => popup.classList.add('active');
        closeBtn.onclick = () => stopRecording(true); 

        langBtns.forEach(btn => {
            btn.onclick = () => {
                langBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                selectedLang = btn.dataset.lang;
            };
        });

        // =================================================================
        // CÁC HÀM XỬ LÝ ÂM THANH PHÍA TRÌNH DUYỆT
        // =================================================================

        function bufferToWav(buffer, targetSampleRate) {
            const numOfChan = buffer.numberOfChannels;
            const a_length = buffer.length;
            const resampled_length = Math.round(a_length * targetSampleRate / buffer.sampleRate);
            const result = new Float32Array(resampled_length);
            
            const spring_factor = (a_length - 1) / (resampled_length - 1);
            result[0] = buffer.getChannelData(0)[0];
            for (let i = 1; i < resampled_length - 1; i++) {
                const tmp = i * spring_factor;
                const before = Math.floor(tmp);
                const after = Math.ceil(tmp);
                const atPoint = tmp - before;
                result[i] = buffer.getChannelData(0)[before] + (buffer.getChannelData(0)[after] - buffer.getChannelData(0)[before]) * atPoint;
            }
            result[resampled_length-1] = buffer.getChannelData(0)[a_length-1];

            const pcm_result = new Int16Array(resampled_length);
            for (let i = 0; i < resampled_length; i++) {
                let s = Math.max(-1, Math.min(1, result[i]));
                pcm_result[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;
            }

            const wav_buffer = new ArrayBuffer(44 + pcm_result.length * 2);
            const view = new DataView(wav_buffer);

            writeString(view, 0, 'RIFF');
            view.setUint32(4, 36 + pcm_result.length * 2, true);
            writeString(view, 8, 'WAVE');
            writeString(view, 12, 'fmt ');
            view.setUint32(16, 16, true);
            view.setUint16(20, 1, true);
            view.setUint16(22, 1, true); // Mono
            view.setUint32(24, targetSampleRate, true);
            view.setUint32(28, targetSampleRate * 2, true);
            view.setUint16(32, 2, true);
            view.setUint16(34, 16, true);
            writeString(view, 36, 'data');
            view.setUint32(40, pcm_result.length * 2, true);

            for (let i = 0; i < pcm_result.length; i++) {
                view.setInt16(44 + i * 2, pcm_result[i], true);
            }

            return new Blob([view], { type: 'audio/wav' });
        }

        function writeString(view, offset, string) {
            for (let i = 0; i < string.length; i++) {
                view.setUint8(offset + i, string.charCodeAt(i));
            }
        }

        const stopRecording = (forceClosePopup) => {
            if (!recording && forceClosePopup) {
                popup.classList.remove('active');
                return;
            }
            if (!recording) return;

            recorder.stop();
            stream.getTracks().forEach(t => t.stop());
            
            recording = false;
            recordBtn.classList.remove("recording");
            
            if (forceClosePopup) {
                popup.classList.remove('active');
            }
        };
        
        recordBtn.onclick = async () => {
            if (recording) {
                stopRecording(false);
                return;
            }

            try {
                stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            } catch (err) {
                resultBox.innerHTML = '<div style="color:red;">Không truy cập được micro.</div>';
                return;
            }
            
            recording = true;
            recordBtn.classList.add("recording");
            resultBox.innerHTML = "🎤 Đang lắng nghe...";
            chunks = [];

            recorder = new MediaRecorder(stream);
            recorder.ondataavailable = e => chunks.push(e.data);
            
            recorder.onstop = async () => {
                if (chunks.length === 0 || chunks[0].size === 0) {
                    resultBox.innerHTML = '<div style="color:orange;">Không có âm thanh được ghi lại.</div>';
                    return;
                }

                resultBox.innerHTML = "⏳ Đang chuyển đổi âm thanh...";

                const webmBlob = new Blob(chunks, { type: 'audio/webm' });
                const tempAudioContext = new AudioContext();
                const arrayBuffer = await webmBlob.arrayBuffer();
                const audioBuffer = await tempAudioContext.decodeAudioData(arrayBuffer);
                
                const wavBlob = bufferToWav(audioBuffer, 16000);
                tempAudioContext.close();

                const fd = new FormData();
                fd.append("action", "voice_search");
                fd.append("language", selectedLang);
                fd.append("audio_data", wavBlob, "recording.wav");

                resultBox.innerHTML = "⏳ Đang xử lý...";

                fetch("<?php echo admin_url('admin-ajax.php'); ?>", { method: "POST", body: fd })
                .then(res => res.json())
                .then(res => {
                    if (res.success) {
                        resultBox.innerHTML = `<div class="result-item" data-query="${res.data.query}">${res.data.query}</div>`;
                        document.querySelectorAll('.result-item').forEach(item => {
                            item.onclick = () => {
                                const searchInput = document.querySelector('input[name="s"]');
                                if(searchInput && searchInput.form){
                                    searchInput.value = res.data.query;
                                    searchInput.form.submit();
                                } else {
                                    window.location.href = res.data.redirect_url;
                                }
                            };
                        });
                    } else {
                        resultBox.innerHTML = `<div style="color:red;">${res.data}</div>`;
                    }
                })
                .catch(err => {
                    resultBox.innerHTML = `<div style="color:red;">Lỗi kết nối. Vui lòng thử lại.</div>`;
                });
            };

            recorder.start();
            setTimeout(() => { if(recording) stopRecording(false); }, MAX_RECORD_TIME);
        };
    });
    </script>
    <?php
    return ob_get_clean();
});

// ===================================================================================
// PHẦN 4: AJAX XỬ LÝ AUDIO & GỌI AZURE (ĐÃ BỎ FFmpeg)
// ===================================================================================

add_action('wp_ajax_voice_search', 'handle_voice_search');
add_action('wp_ajax_nopriv_voice_search', 'handle_voice_search');

function handle_voice_search() {
    if (!isset($_FILES['audio_data'])) {
        wp_send_json_error('Thiếu dữ liệu âm thanh.');
        return;
    }

    $language = isset($_POST['language']) ? sanitize_text_field($_POST['language']) : 'vi-VN';

    $upload = wp_handle_upload($_FILES['audio_data'], ['test_form' => false]);
    if (!empty($upload['error'])) {
        wp_send_json_error('Upload thất bại: ' . $upload['error']);
        return;
    }

    $wav_file_path = $upload['file'];

    // Gọi thẳng Azure vì file đã là định dạng WAV
    $transcribed_text = trim(azure_transcribe_audio($wav_file_path, $language));

    // Xóa file tạm sau khi xử lý
    unlink($wav_file_path);

    if (strpos($transcribed_text, '⚠️') === 0 || strpos($transcribed_text, '❌') === 0) {
        wp_send_json_error($transcribed_text);
        return;
    }

    if (empty($transcribed_text)) {
        wp_send_json_error('Không nhận dạng được giọng nói.');
        return;
    }

    $clean_text = preg_replace('/[[:punct:]]/u', '', $transcribed_text);
    $clean_text = preg_replace('/\s+/u', ' ', $clean_text);
    $sanitized_query = sanitize_text_field(trim($clean_text));

    $search_url = home_url('/?s=' . urlencode($sanitized_query));

    wp_send_json_success(['query' => $sanitized_query, 'redirect_url' => $search_url]);
}

// ===================================================================================
// PHẦN 5: CHỈ TÌM KIẾM TRONG TIÊU ĐỀ
// ===================================================================================

function __custom_search_by_title_smart( $search, $wp_query ) {
    global $wpdb;
    if ( ! is_admin() && $wp_query->is_main_query() && $wp_query->is_search() ) {
        $search_term = $wp_query->query_vars['s'];
        if ( empty( $search_term ) ) return $search;
        $search_terms = explode( ' ', $search_term );
        $search_conditions = [];
        foreach ( $search_terms as $term ) {
            $term = trim( $term );
            if ( !empty($term) ) {
                $search_conditions[] = $wpdb->prepare("{$wpdb->posts}.post_title LIKE %s", '%' . $wpdb->esc_like( $term ) . '%');
            }
        }
        if ( !empty($search_conditions) ) {
            $search = " AND ( " . implode( ' AND ', $search_conditions ) . " )";
            $search .= " AND ({$wpdb->posts}.post_status = 'publish')";
        }
    }
    return $search;
}
add_filter( 'posts_search', '__custom_search_by_title_smart', 10, 2 );
