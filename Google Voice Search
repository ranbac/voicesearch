/**
 * Plugin Name: Google Voice Search (Hybrid Optimized)
 * Description: Tìm kiếm bằng giọng nói sử dụng Google Speech-to-Text API. Tự động xử lý định dạng cho mọi trình duyệt.
 * Version: 7.2
 * Author: Strong Anchor Tech (Updated by GPT-5, Modified by Gemini)
 * Author URI: https://stronganchortech.com
 */

// ===================================================================================
// PHẦN 1: CÀI ĐẶT PLUGIN VÀ CẤU HÌNH GOOGLE (Không thay đổi)
// ===================================================================================

add_action('admin_menu', function() {
    add_submenu_page('tools.php', 'Google Speech Settings', 'Google Speech', 'manage_options', 'google-speech-settings', function() {
        ?>
        <div class="wrap">
            <h2>Google Cloud Speech-to-Text - Cài đặt</h2>
            <p>Bạn cần tạo một <strong>API Key</strong> từ Google Cloud Console và kích hoạt "Speech-to-Text API".</p>
            <form method="post" action="options.php">
                <?php
                    settings_fields('google_speech_settings_group');
                    do_settings_sections('google_speech_settings_group');
                ?>
                <table class="form-table">
                    <tr valign="top">
                        <th scope="row">Google Speech API Key</th>
                        <td><input type="text" name="google_speech_api_key" value="<?php echo esc_attr(get_option('google_speech_api_key')); ?>" size="60" /></td>
                    </tr>
                </table>
                <?php submit_button(); ?>
            </form>
        </div>
        <?php
    });
});

add_action('admin_init', function() {
    register_setting('google_speech_settings_group', 'google_speech_api_key');
});

// ===================================================================================
// PHẦN 2: GỌI API GOOGLE (Không thay đổi)
// ===================================================================================

function google_transcribe_audio($audio_path, $language = 'vi-VN', $encoding = 'LINEAR16') {
    $api_key = get_option('google_speech_api_key');
    if (!$api_key) return '⚠️ Vui lòng cung cấp Google Speech API Key.';

    $url = "https://speech.googleapis.com/v1/speech:recognize?key={$api_key}";
    $audio_data = @file_get_contents($audio_path);
    if ($audio_data === false) return '❌ Không thể đọc file âm thanh.';

    $base64_audio = base64_encode($audio_data);
    $config = ['encoding' => $encoding, 'languageCode' => $language];
    if ($encoding === 'LINEAR16') {
        $config['sampleRateHertz'] = 16000;
        $config['audioChannelCount'] = 1;
    }
    $config['enableAutomaticPunctuation'] = true;
    $payload = ['config' => $config, 'audio' => ['content' => $base64_audio]];
    $json_payload = json_encode($payload);
    $headers = ['Content-Type: application/json', 'Content-Length: ' . strlen($json_payload)];

    $ch = curl_init();
    curl_setopt_array($ch, [
        CURLOPT_URL => $url,
        CURLOPT_HTTPHEADER => $headers,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => $json_payload,
        CURLOPT_SSL_VERIFYPEER => true
    ]);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code != 200 || !$response) return "❌ Lỗi từ Google (HTTP {$http_code}): " . ($response ?: 'Không có phản hồi.');
    $result = json_decode($response, true);
    if (isset($result['error'])) return "❌ Lỗi từ Google: " . $result['error']['message'];
    if (isset($result['results'][0]['alternatives'][0]['transcript'])) return $result['results'][0]['alternatives'][0]['transcript'];
    return '❌ Không thể nhận dạng giọng nói.';
}

// ===================================================================================
// PHẦN 3: SHORTCODE VÀ JAVASCRIPT (Không thay đổi so với v7.1)
// ===================================================================================

add_shortcode('voice_search_button', function() {
    ob_start();
    ?>
    <style>
        #voice-search-btn { background: none; border: none; cursor: pointer; padding: 5px; }
        #voice-search-btn img { width: 28px; height: 28px; }
        #voice-popup { display: none; position: fixed; top: 50% !important; left: 50% !important; transform: translate(-50%, -50%) !important; background: #f0f0f0 !important; padding: 20px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.25); text-align: center; z-index: 9999; width: 340px; }
        #voice-popup.active { display: block; }
        #voice-popup h3 { margin-top: 0; font-size: 18px; }
        .lang-container { display: flex; justify-content: center; gap: 14px; margin-bottom: 12px; }
        .lang-btn { border: none; background: none; cursor: pointer; text-align: center; }
        .lang-btn img { width: 48px; height: 32px; border: 2px solid transparent; border-radius: 6px; transition: 0.2s; }
        .lang-btn.active img { border-color: #0073aa; box-shadow: 0 0 6px rgba(0,115,170,0.6); }
        .lang-label { font-size: 12px; margin-top: 4px; color: #333; }
        #record-btn { margin-top: 12px; padding: 10px; border: none; border-radius: 50%; background: #0073aa; cursor: pointer; }
        #record-btn img { width: 28px; height: 28px;}
        #record-btn.recording img { filter: invert(29%) sepia(93%) saturate(7486%) hue-rotate(356deg) brightness(97%) contrast(116%); animation: pulse 1s infinite; }
        @keyframes pulse { 0% { transform: scale(1); opacity: 1; } 50% { transform: scale(1.2); opacity: 0.6; } 100% { transform: scale(1); opacity: 1; } }
        #close-popup { margin-top: 10px; background: none; border: none; color: #888; cursor: pointer; }
        #result-box { margin-top: 15px; font-size: 15px; color: #222; }
        .result-item { padding: 6px 10px; border: 1px solid #ccc; border-radius: 6px; cursor: pointer; margin-top: 6px; background: #f9f9f9; }
        .result-item:hover { background: #eee; }
    </style>

    <button id="voice-search-btn" title="Tìm kiếm bằng giọng nói"><img src="https://img.icons8.com/ios-glyphs/60/FFFFFF/microphone.png" alt="Voice Search"></button>
    <div id="voice-popup">
        <h3>Chọn ngôn ngữ</h3>
        <div class="lang-container">
            <button class="lang-btn active" data-lang="vi-VN"><img src="https://flagcdn.com/vn.svg" alt="Tiếng Việt"><div class="lang-label">Tìm bài viết</div></button>
            <button class="lang-btn" data-lang="zh-CN"><img src="https://flagcdn.com/cn.svg" alt="中文"><div class="lang-label">Tra từ</div></button>
            <button class="lang-btn" data-lang="en-US"><img src="https://flagcdn.com/gb.svg" alt="English"><div class="lang-label">Tìm bài viết</div></button>
        </div>
        <button id="record-btn" title="Ghi âm"><img src="https://img.icons8.com/ios-glyphs/60/ffffff/microphone.png" alt="Record"></button>
        <div id="result-box"></div>
        <button id="close-popup">Đóng</button>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const popup = document.getElementById('voice-popup');
        const voiceBtn = document.getElementById('voice-search-btn');
        const recordBtn = document.getElementById('record-btn');
        const langBtns = document.querySelectorAll('.lang-btn');
        const closeBtn = document.getElementById('close-popup');
        const resultBox = document.getElementById('result-box');
        if (popup) { document.body.appendChild(popup); }

        let selectedLang = "vi-VN", recorder, stream, chunks = [], recording = false;
        let audioContext, analyser, source, silenceTimer = null;
        const SILENCE_THRESHOLD = 0.01, SILENCE_DELAY = 1000;

        voiceBtn.onclick = () => popup.classList.add('active');
        closeBtn.onclick = () => {
            popup.classList.remove('active');
            if (recording) stopRecordingAndSend();
        };
        langBtns.forEach(btn => {
            btn.onclick = () => {
                langBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                selectedLang = btn.dataset.lang;
            };
        });

        const getSupportedMimeType = () => {
            const mimeTypes = ['audio/mp4', 'audio/webm;codecs=opus', 'audio/ogg;codecs=opus', 'audio/webm'];
            for (const mimeType of mimeTypes) if (MediaRecorder.isTypeSupported(mimeType)) return mimeType;
            return '';
        };

        const stopRecordingAndSend = () => {
            if (!recording) return;
            recorder.stop();
            stream.getTracks().forEach(t => t.stop());
            if (audioContext && audioContext.state !== 'closed') audioContext.close();
            recording = false;
            recordBtn.classList.remove("recording");
            clearTimeout(silenceTimer);
        };

        const detectSilence = () => {
            if (!recording || !analyser) return;
            const dataArray = new Float32Array(analyser.fftSize);
            analyser.getFloatTimeDomainData(dataArray);
            let sumSquares = 0.0;
            for (const amplitude of dataArray) sumSquares += amplitude * amplitude;
            const volume = Math.sqrt(sumSquares / dataArray.length);
            if (volume < SILENCE_THRESHOLD) {
                if (!silenceTimer) silenceTimer = setTimeout(stopRecordingAndSend, SILENCE_DELAY);
            } else {
                clearTimeout(silenceTimer);
                silenceTimer = null;
            }
            requestAnimationFrame(detectSilence);
        };
        
        recordBtn.onclick = async () => {
            if (recording) { stopRecordingAndSend(); return; }
            try {
                stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            } catch (err) { alert("Không thể truy cập micro. Vui lòng cấp quyền và thử lại."); return; }

            const mimeType = getSupportedMimeType();
            if (!mimeType) { alert('Trình duyệt của bạn không hỗ trợ chức năng ghi âm.'); return; }

            audioContext = new (window.AudioContext || window.webkitAudioContext)();
            analyser = audioContext.createAnalyser();
            source = audioContext.createMediaStreamSource(stream);
            source.connect(analyser);
            recorder = new MediaRecorder(stream, { mimeType: mimeType });
            chunks = [];
            recorder.ondataavailable = e => chunks.push(e.data);
            
            recorder.onstop = () => {
                const blob = new Blob(chunks, { type: mimeType });
                if (blob.size < 100) { resultBox.innerHTML = '<div style="color:orange;">Không có âm thanh được ghi lại.</div>'; return; }
                
                const fileExtension = mimeType.split(';')[0].split('/')[1];
                const fileName = `recording.${fileExtension}`;
                const fd = new FormData();
                fd.append("action", "voice_search");
                fd.append("language", selectedLang);
                fd.append("audio_data", blob, fileName);
                fd.append("mime_type", mimeType);

                resultBox.innerHTML = "⏳ Đang xử lý...";
                fetch("<?php echo admin_url('admin-ajax.php'); ?>", { method: "POST", body: fd })
                .then(res => res.json())
                .then(res => {
                    if (res.success) {
                        resultBox.innerHTML = `<div class="result-item" data-query="${res.data.query}">${res.data.query}</div>`;
                        document.querySelectorAll('.result-item').forEach(item => {
                            item.onclick = () => { window.location.href = res.data.redirect_url; };
                        });
                    } else {
                        resultBox.innerHTML = `<div style="color:red;">${res.data}</div>`;
                    }
                });
            };
            recorder.start();
            recording = true;
            recordBtn.classList.add("recording");
            detectSilence();
            setTimeout(() => { if (recording) stopRecordingAndSend(); }, 8000);
        };
    });
    </script>
    <?php
    return ob_get_clean();
});


// ===================================================================================
// PHẦN 4: AJAX XỬ LÝ AUDIO (LOGIC HYBRID - ĐÃ SỬA LỖI)
// ===================================================================================

add_action('wp_ajax_voice_search', 'handle_voice_search');
add_action('wp_ajax_nopriv_voice_search', 'handle_voice_search');

function handle_voice_search() {
    if (!isset($_FILES['audio_data'])) {
        wp_send_json_error('Thiếu dữ liệu âm thanh.');
        return;
    }

    $language = isset($_POST['language']) ? sanitize_text_field($_POST['language']) : 'vi-VN';
    $mime_type = isset($_POST['mime_type']) ? sanitize_text_field($_POST['mime_type']) : 'audio/webm';

    $upload = wp_handle_upload($_FILES['audio_data'], ['test_form' => false]);
    if (!empty($upload['error'])) {
        wp_send_json_error('Upload thất bại: ' . $upload['error']);
        return;
    }

    $original_file_path = $upload['file'];
    $transcribed_text = '';

    // === CẢI TIẾN: LOGIC HYBRID ===
    // Nếu là file mp4 từ trình duyệt cũ, dùng FFmpeg để chuyển đổi
    if (strpos($mime_type, 'audio/mp4') !== false) {
        
        // Kiểm tra xem FFmpeg có được cài đặt không
        if (empty(shell_exec('command -v ffmpeg'))) {
            unlink($original_file_path);
            wp_send_json_error('Lỗi: FFmpeg là bắt buộc để xử lý âm thanh từ trình duyệt này (ví dụ: Safari cũ). Vui lòng liên hệ quản trị viên hosting.');
            return;
        }

        $wav_file_path = $original_file_path . '.wav';
        // Chuyển đổi file mp4 sang wav (LINEAR16) mà Google hiểu
        shell_exec("ffmpeg -i " . escapeshellarg($original_file_path) . " -acodec pcm_s16le -ar 16000 -ac 1 " . escapeshellarg($wav_file_path) . " -y");

        if (!file_exists($wav_file_path) || filesize($wav_file_path) == 0) {
             unlink($original_file_path);
             wp_send_json_error('Không thể chuyển đổi file âm thanh bằng FFmpeg.');
             return;
        }

        // Gọi Google API với file wav đã chuyển đổi
        $transcribed_text = trim(google_transcribe_audio($wav_file_path, $language, 'LINEAR16'));

        // Dọn dẹp cả hai file
        unlink($original_file_path);
        unlink($wav_file_path);

    } else {
        // Nếu là định dạng hiện đại (webm, ogg), gửi trực tiếp
        $transcribed_text = trim(google_transcribe_audio($original_file_path, $language, 'WEBM_OPUS'));
        unlink($original_file_path);
    }
    // === KẾT THÚC LOGIC HYBRID ===

    if (strpos($transcribed_text, '⚠️') === 0 || strpos($transcribed_text, '❌') === 0) {
        wp_send_json_error($transcribed_text);
        return;
    }

    if (empty($transcribed_text)) {
        wp_send_json_error('Không nhận dạng được giọng nói.');
        return;
    }

    $clean_text = preg_replace('/[[:punct:]]/u', '', $transcribed_text);
    $clean_text = preg_replace('/\s+/u', ' ', $clean_text);
    $sanitized_query = sanitize_text_field(trim($clean_text));
    $search_url = home_url('/?s=' . urlencode($sanitized_query));

    wp_send_json_success(['query' => $sanitized_query, 'redirect_url' => $search_url]);
}

// ===================================================================================
// PHẦN 5: BỘ LỌC TÌM KIẾM (Không thay đổi)
// ===================================================================================

function __custom_search_by_title_smart( $search, $wp_query ) {
    global $wpdb;
    if ( ! is_admin() && $wp_query->is_main_query() && $wp_query->is_search() ) {
        $search_term = $wp_query->query_vars['s'];
        if ( empty( $search_term ) ) return $search;
        $search_terms = explode( ' ', $search_term );
        $search_conditions = [];
        foreach ( $search_terms as $term ) {
            $term = trim( $term );
            if ( !empty($term) ) {
                $search_conditions[] = $wpdb->prepare("{$wpdb->posts}.post_title LIKE %s", '%' . $wpdb->esc_like( $term ) . '%');
            }
        }
        if ( !empty($search_conditions) ) {
            $search = " AND ( " . implode( ' AND ', $search_conditions ) . " )";
            $search .= " AND ({$wpdb->posts}.post_status = 'publish')";
        }
    }
    return $search;
}
add_filter( 'posts_search', '__custom_search_by_title_smart', 10, 2 );
