/*
 * Plugin Name: Azure Voice Search
 * Description: Tìm kiếm bằng giọng nói (Tiếng Việt / Trung / Anh) sử dụng Azure Cognitive Services Speech API.
 * Version: 5.6
 * Author: Strong Anchor Tech (Updated by GPT-5)
 * Author URI: https://stronganchortech.com
 */

// ===================================================================================
// PHẦN 1: CÀI ĐẶT PLUGIN VÀ CẤU HÌNH AZURE
// ===================================================================================

add_action('admin_menu', function() {
    add_submenu_page('tools.php', 'Azure Speech Settings', 'Azure Speech', 'manage_options', 'azure-speech-settings', function() {
        ?>
        <div class="wrap">
            <h2>Azure Cognitive Services Speech - Cài đặt</h2>
            <form method="post" action="options.php">
                <?php
                    settings_fields('azure_speech_settings_group');
                    do_settings_sections('azure_speech_settings_group');
                ?>
                <table class="form-table">
                    <tr valign="top">
                        <th scope="row">Azure Speech Key</th>
                        <td><input type="text" name="azure_speech_key" value="<?php echo esc_attr(get_option('azure_speech_key')); ?>" size="60" /></td>
                    </tr>
                    <tr valign="top">
                        <th scope="row">Azure Speech Region</th>
                        <td><input type="text" name="azure_speech_region" value="<?php echo esc_attr(get_option('azure_speech_region')); ?>" size="20" placeholder="eastus, southeastasia" /></td>
                    </tr>
                </table>
                <?php submit_button(); ?>
            </form>
        </div>
        <?php
    });
});

add_action('admin_init', function() {
    register_setting('azure_speech_settings_group', 'azure_speech_key');
    register_setting('azure_speech_settings_group', 'azure_speech_region');
});

// ===================================================================================
// PHẦN 2: GỌI API AZURE (có tham số ngôn ngữ)
// ===================================================================================

function azure_transcribe_audio($audio_path, $language = 'vi-VN') {
    $speech_key = get_option('azure_speech_key');
    $speech_region = get_option('azure_speech_region');

    if (!$speech_key || !$speech_region) {
        return '⚠️ Vui lòng cung cấp Azure Speech Key và Region.';
    }

    $url = "https://{$speech_region}.stt.speech.microsoft.com/speech/recognition/conversation/cognitiveservices/v1?language={$language}";
    
    $headers = [
        'Ocp-Apim-Subscription-Key: ' . $speech_key,
        'Content-Type: audio/wav; codecs=audio/pcm; samplerate=16000'
    ];

    $audio_data = file_get_contents($audio_path);
    if ($audio_data === false) {
        return '❌ Không thể đọc file âm thanh.';
    }

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $audio_data);
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    if ($http_code != 200 || !$response) {
        return "❌ Lỗi từ Azure (HTTP {$http_code}): " . ($response ?: 'Không có phản hồi.');
    }

    $result = json_decode($response, true);
    if (isset($result['RecognitionStatus']) && $result['RecognitionStatus'] === 'Success') {
        return $result['DisplayText'];
    } else {
        return '❌ Không thể nhận dạng giọng nói.';
    }
}

// ===================================================================================
// ===================================================================================
// PHẦN 3: SHORTCODE HIỂN THỊ NÚT MICRO + POPUP (Auto stop 5s + icon nhấp nháy)
// ===================================================================================

add_shortcode('voice_search_button', function() {
    ob_start();
    ?>
    <style>
        #voice-search-btn { background: none; border: none; cursor: pointer; padding: 5px; }
        #voice-search-btn img { width: 28px; height: 28px; }

        #voice-popup {
            display: none; position: fixed; 
            top: 50% !important; left: 50% !important;
            transform: translate(-50%, -50%) !important;
            background: #f0f0f0 !important; padding: 20px; border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.25);
            text-align: center; z-index: 9999; width: 340px;
        }
        #voice-popup.active { display: block; }
        #voice-popup h3 { margin-top: 0; font-size: 18px; }

        .lang-container { display: flex; justify-content: center; gap: 14px; margin-bottom: 12px; }
        .lang-btn { border: none; background: none; cursor: pointer; text-align: center; }
        .lang-btn img { width: 48px; height: 32px; border: 2px solid transparent; border-radius: 6px; transition: 0.2s; }
        .lang-btn.active img { border-color: #0073aa; box-shadow: 0 0 6px rgba(0,115,170,0.6); }
        .lang-label { font-size: 12px; margin-top: 4px; color: #333; }

        #record-btn { margin-top: 12px; padding: 10px; border: none; border-radius: 50%; background: #0073aa; cursor: pointer; }
        #record-btn img { width: 28px; height: 28px;}

        /* Hiệu ứng micro nhấp nháy đỏ khi đang ghi âm */
        #record-btn.recording img {
            filter: invert(29%) sepia(93%) saturate(7486%) hue-rotate(356deg) brightness(97%) contrast(116%);
            animation: pulse 1s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.2); opacity: 0.6; }
            100% { transform: scale(1); opacity: 1; }
        }

        #countdown { font-size: 14px; color: #0073aa; margin-top: 6px; }

        #close-popup { margin-top: 10px; background: none; border: none; color: #888; cursor: pointer; }

        #result-box { margin-top: 15px; font-size: 15px; color: #222; }
        .result-item { padding: 6px 10px; border: 1px solid #ccc; border-radius: 6px; cursor: pointer; margin-top: 6px; background: #f9f9f9; }
        .result-item:hover { background: #eee; }
    </style>

    <!-- Nút micro mở popup -->
    <button id="voice-search-btn" title="Tìm kiếm bằng giọng nói">
        <img src="https://img.icons8.com/ios-glyphs/60/FFFFFF/microphone.png" alt="Voice Search">
    </button>

    <!-- Popup -->
    <div id="voice-popup">
        <h3>Chọn ngôn ngữ</h3>
        <div class="lang-container">
            <button class="lang-btn active" data-lang="vi-VN">
                <img src="https://flagcdn.com/vn.svg" alt="Tiếng Việt"><div class="lang-label">Việt</div>
            </button>
            <button class="lang-btn" data-lang="zh-CN">
                <img src="https://flagcdn.com/cn.svg" alt="中文"><div class="lang-label">中文</div>
            </button>
            <button class="lang-btn" data-lang="en-US">
                <img src="https://flagcdn.com/gb.svg" alt="English"><div class="lang-label">English</div>
            </button>
        </div>
        <button id="record-btn" title="Ghi âm">
            <img src="https://img.icons8.com/ios-glyphs/60/ffffff/microphone.png" alt="Record">
        </button>
        <div id="countdown"></div>
        <div id="result-box"></div>
        <button id="close-popup">Đóng</button>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const popup = document.getElementById('voice-popup');
        const voiceBtn = document.getElementById('voice-search-btn');
        const recordBtn = document.getElementById('record-btn');
        const langBtns = document.querySelectorAll('.lang-btn');
        const closeBtn = document.getElementById('close-popup');
        const resultBox = document.getElementById('result-box');
        const countdownEl = document.getElementById('countdown');
		const voicePopup = document.getElementById('voice-popup');

    // Nếu tìm thấy, di chuyển nó vào cuối thẻ body
    if (voicePopup) {
        document.body.appendChild(voicePopup);
    }

        let selectedLang = "vi-VN";
        let recorder, stream, chunks = [], recording = false, countdownTimer;

        // Mở / Đóng popup
        voiceBtn.onclick = () => popup.classList.add('active');
        closeBtn.onclick = () => popup.classList.remove('active');

        // Chọn ngôn ngữ
        langBtns.forEach(btn => {
            btn.onclick = () => {
                langBtns.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                selectedLang = btn.dataset.lang;
            };
        });

        // Ghi âm (auto stop sau 5s + countdown)
        recordBtn.onclick = async () => {
            if (!recording) {
                try {
                    stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                } catch (err) {
                    alert("Không truy cập được micro."); return;
                }
                recorder = new MediaRecorder(stream);
                chunks = [];
                recorder.ondataavailable = e => chunks.push(e.data);
                recorder.onstop = () => {
                    recordBtn.classList.remove("recording");
                    countdownEl.textContent = "";
                    const blob = new Blob(chunks, { type: recorder.mimeType });
                    const fd = new FormData();
                    fd.append("action", "voice_search");
                    fd.append("language", selectedLang);
                    fd.append("audio_data", blob, "recording.webm");

                    resultBox.innerHTML = "⏳ Đang xử lý...";

                    fetch("<?php echo admin_url('admin-ajax.php'); ?>", { method: "POST", body: fd })
                    .then(res => res.json())
                    .then(res => {
                        if (res.success) {
                            resultBox.innerHTML = `<div class="result-item" data-query="${res.data.query}">${res.data.query}</div>`;
                            document.querySelectorAll('.result-item').forEach(item => {
                                item.onclick = () => {
                                    window.location.href = res.data.redirect_url;
                                };
                            });
                        } else {
                            resultBox.innerHTML = `<div style="color:red;">${res.data}</div>`;
                        }
                    });
                };
                recorder.start();
                recording = true;
                recordBtn.classList.add("recording");

                // Countdown 5s
                let timeLeft = 5;
                countdownEl.textContent = `⏱️ ${timeLeft}s`;
                countdownTimer = setInterval(() => {
                    timeLeft--;
                    if (timeLeft > 0) {
                        countdownEl.textContent = `⏱️ ${timeLeft}s`;
                    } else {
                        clearInterval(countdownTimer);
                    }
                }, 1000);

                // ⏱️ Tự động dừng sau 5 giây
                setTimeout(() => {
                    if (recording) {
                        recorder.stop();
                        stream.getTracks().forEach(t => t.stop());
                        recording = false;
                    }
                }, 5000);
            }
        };
    });
    </script>
    <?php
    return ob_get_clean();
});
// ===================================================================================
// PHẦN 4: AJAX XỬ LÝ AUDIO & GỌI AZURE
// ===================================================================================

add_action('wp_ajax_voice_search', 'handle_voice_search');
add_action('wp_ajax_nopriv_voice_search', 'handle_voice_search');

function handle_voice_search() {
    if (!isset($_FILES['audio_data'])) {
        wp_send_json_error('Thiếu dữ liệu âm thanh.');
        return;
    }

    $language = isset($_POST['language']) ? sanitize_text_field($_POST['language']) : 'vi-VN';

    $upload = wp_handle_upload($_FILES['audio_data'], ['test_form' => false]);
    if (!empty($upload['error'])) {
        wp_send_json_error('Upload thất bại: ' . $upload['error']);
        return;
    }

    $original_file_path = $upload['file'];
    $wav_file_path = $original_file_path . '.wav';

    if (empty(shell_exec('command -v ffmpeg'))) {
        unlink($original_file_path);
        wp_send_json_error('Lỗi máy chủ: FFmpeg chưa được cài đặt.');
        return;
    }

    shell_exec("ffmpeg -i " . escapeshellarg($original_file_path) . " -acodec pcm_s16le -ar 16000 -ac 1 " . escapeshellarg($wav_file_path) . " -y");

    if (!file_exists($wav_file_path) || filesize($wav_file_path) == 0) {
        unlink($original_file_path);
        wp_send_json_error('Không thể chuyển đổi file âm thanh.');
        return;
    }

    $transcribed_text = trim(azure_transcribe_audio($wav_file_path, $language));

    unlink($original_file_path);
    unlink($wav_file_path);

    if (strpos($transcribed_text, '⚠️') === 0 || strpos($transcribed_text, '❌') === 0) {
        wp_send_json_error($transcribed_text);
        return;
    }

    if (empty($transcribed_text)) {
        wp_send_json_error('Không nhận dạng được giọng nói.');
        return;
    }

    // Bỏ toàn bộ dấu câu (cho mọi ngôn ngữ)
    $clean_text = preg_replace('/[[:punct:]]/u', '', $transcribed_text);
    $clean_text = preg_replace('/\s+/u', ' ', $clean_text);
    $sanitized_query = sanitize_text_field(trim($clean_text));

    $search_url = home_url('/?s=' . urlencode($sanitized_query));

    wp_send_json_success(['query' => $sanitized_query, 'redirect_url' => $search_url]);
}

// ===================================================================================
// PHẦN 5: CHỈ TÌM KIẾM TRONG TIÊU ĐỀ
// ===================================================================================

function __custom_search_by_title_only( $search, $wp_query ) {
    global $wpdb;
    if ( ! is_admin() && $wp_query->is_main_query() && $wp_query->is_search() ) {
        $search_term = $wp_query->query_vars['s'];
        if ( empty( $search_term ) ) {
            return $search;
        }
        $search = $wpdb->prepare(
            " AND {$wpdb->posts}.post_title LIKE %s ",
            '%' . $wpdb->esc_like( $search_term ) . '%'
        );
        $search .= " AND ({$wpdb->posts}.post_status = 'publish')";
    }
    return $search;
}
add_filter( 'posts_search', '__custom_search_by_title_only', 10, 2 );
